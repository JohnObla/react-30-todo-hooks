{"version":3,"sources":["Todo/Todo.js","hooks/useFormInput.js","NewTodoForm/NewTodoForm.js","InlineForm/InlineForm.js","TodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","handleClick","fn","id","className","onClick","toggleIsDone","isDone","task","htmlFor","onChange","type","name","checked","aria-label","edit","close","useFormInput","init","useState","input","setinput","changeInput","evt","target","value","resetInput","changeCheckBox","NewTodoForm","changeTask","resetTask","onSubmit","preventDefault","submit","minLength","maxLength","InlineForm","cancel","TodoList","initialTodos","JSON","parse","localStorage","getItem","todos","setTodos","useEffect","setItem","stringify","editTodo","map","t","isEditing","submitEdit","cancelEdit","closeTodo","filter","transitions","useTransition","todo","from","transform","enter","height","opacity","leave","config","default","sort","el1","el2","Error","sortDone","item","key","div","style","uuidv4","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c415d40.chunk.js","sourcesContent":["import './Todo.css';\n\nconst Todo = props => {\n  const handleClick = fn => () => {\n    fn(props.id);\n  };\n\n  return (\n    <article className=\"Todo\">\n      <p\n        onClick={handleClick(props.toggleIsDone)}\n        className={`Todo-task ${props.isDone && 'Todo-isDone'}`}\n      >\n        {props.task}\n        <span>\n          <label className=\"visually-hidden\" htmlFor={props.id}>\n            Mark as done\n          </label>\n          <input\n            onChange={handleClick(props.toggleIsDone)}\n            type=\"checkbox\"\n            id={props.id}\n            name={'isDone'}\n            checked={props.isDone}\n          />\n        </span>\n      </p>\n      <span className=\"Todo-buttons\">\n        <button\n          className=\"Todo-edit\"\n          aria-label=\"Edit\"\n          onClick={handleClick(props.edit)}\n        >\n          <i className=\"fas fa-pencil-alt\"></i>\n        </button>\n        <button\n          className=\"Todo-close\"\n          aria-label=\"Close\"\n          onClick={handleClick(props.close)}\n        >\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </span>\n    </article>\n  );\n};\n\nexport default Todo;\n","import React, { useState } from 'react';\n\nconst useFormInput = (init = '') => {\n  const [input, setinput] = useState(init);\n\n  const changeInput = evt => setinput(evt.target.value);\n  const resetInput = () => setinput(init);\n  const changeCheckBox = evt => setinput(evt.target.checked);\n\n  return [input, changeInput, resetInput, changeCheckBox];\n};\n\nexport default useFormInput;\n","import useFormInput from '../hooks/useFormInput';\nimport './NewTodoForm.css';\n\nconst NewTodoForm = props => {\n  const [task, changeTask, resetTask] = useFormInput('');\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (task !== '') {\n      props.submit(task);\n      resetTask();\n    }\n  };\n\n  return (\n    <form className=\"NewTodoForm\" onSubmit={handleSubmit}>\n      <label className=\"NewTodoForm-label\" htmlFor=\"task\">\n        New Todo\n      </label>\n      <span className=\"\">\n        <input\n          className=\"NewTodoForm-input-and-button NewTodoForm-input\"\n          type=\"text\"\n          id=\"task\"\n          name=\"task\"\n          value={task}\n          onChange={changeTask}\n          minLength={0}\n          maxLength={27}\n        />\n        <button\n          className=\"NewTodoForm-button NewTodoForm-input-and-button\"\n          type=\"submit\"\n        >\n          Add Todo\n        </button>\n      </span>\n    </form>\n  );\n};\n\nexport default NewTodoForm;\n","import React from 'react';\nimport useFormInput from '../hooks/useFormInput';\nimport '../Todo/Todo.css';\nimport './InlineForm.css';\n\nconst InlineForm = props => {\n  const [task, changeTask, resetTask] = useFormInput(props.task);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (task !== '') {\n      props.submit(props.id, task);\n      resetTask();\n    }\n  };\n\n  const handleCancel = () => {\n    props.cancel(props.id);\n  };\n\n  return (\n    <form className=\"Todo\" onSubmit={handleSubmit}>\n      <label className=\"visually-hidden\" htmlFor=\"edit-task\">\n        Edit Task\n      </label>\n      <input\n        className=\"InlineForm-input\"\n        type=\"text\"\n        id=\"edit-task\"\n        name=\"task\"\n        value={task}\n        onChange={changeTask}\n        minLength={0}\n        maxLength={27}\n      />\n      <span className=\"Todo-buttons\">\n        <button className=\"Todo-edit\" type=\"submit\" aria-label=\"Submit Edit\">\n          <i className=\"fas fa-check\"></i>\n        </button>\n        <button\n          onClick={handleCancel}\n          type=\"button\"\n          className=\"Todo-close\"\n          aria-label=\"Cancel Edit\"\n        >\n          <i className=\"fas fa-times\"></i>\n        </button>\n      </span>\n    </form>\n  );\n};\n\nexport default InlineForm;\n","import React, { useState, useEffect } from 'react';\nimport { useTransition, animated, config } from 'react-spring';\nimport { v4 as uuidv4 } from 'uuid';\nimport Todo from '../Todo/Todo';\nimport NewTodoForm from '../NewTodoForm/NewTodoForm';\nimport InlineForm from '../InlineForm/InlineForm';\nimport './TodoList.css';\n\nconst TodoList = () => {\n  const initialTodos = JSON.parse(localStorage.getItem('todos')) || [];\n  const [todos, setTodos] = useState(initialTodos);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = task =>\n    setTodos([\n      ...todos,\n      { task, id: uuidv4(), isEditing: false, isDone: false },\n    ]);\n\n  const editTodo = id => {\n    setTodos(\n      todos.map(t => {\n        if (t.id !== id) return { ...t, isEditing: false };\n        return { ...t, isEditing: true };\n      })\n    );\n  };\n\n  const submitEdit = (id, task) => {\n    setTodos(\n      todos.map(t => {\n        if (t.id !== id) return t;\n        return { ...t, task, isEditing: false };\n      })\n    );\n  };\n\n  const cancelEdit = id => {\n    setTodos(\n      todos.map(t => {\n        if (t.id !== id) return t;\n        return { ...t, isEditing: false };\n      })\n    );\n  };\n\n  const toggleIsDone = id => {\n    setTodos(\n      todos.map(t => {\n        if (t.id !== id) return t;\n        return { ...t, isDone: !t.isDone };\n      })\n    );\n  };\n\n  const closeTodo = id => setTodos(todos.filter(t => t.id !== id));\n\n  const sortDone = (el1, el2) => {\n    if (el1.isDone === el2.isDone) return 0;\n    if (!el1.isDone && el2.isDone) return -1;\n    if (el1.isDone && !el2.isDone) return 1;\n\n    throw new Error(\n      `Invalid value for is done. Element 1: ${el1} Element 2: ${el2}`\n    );\n  };\n\n  const sortTransition = (el1, el2) => sortDone(el1.item, el2.item);\n\n  const transitions = useTransition(todos, todo => todo.id, {\n    from: { transform: 'translate(0, 4rem)' },\n    enter: { transform: 'translate(0, 0)', height: '3rem', opacity: 1 },\n    leave: { height: '0rem', opacity: 0 },\n    config: config.default,\n  });\n\n  return (\n    <main className=\"TodoList\">\n      <div className=\"TodoList-headers\">\n        <h1 className=\"TodoList-main-header\">To-do List</h1>\n        <h5 className=\"TodoList-sub-header\">A Simple React Hooks Todo App</h5>\n      </div>\n      <section className=\"TodoList-todos\">\n        {[...transitions]\n          .sort(sortTransition)\n          .map(({ item: t, key, props }) => {\n            if (t.isEditing) {\n              return (\n                <animated.div key={key} style={props}>\n                  <InlineForm\n                    key={t.id}\n                    id={t.id}\n                    task={t.task}\n                    submit={submitEdit}\n                    cancel={cancelEdit}\n                  />\n                </animated.div>\n              );\n            }\n\n            return (\n              <animated.div key={key} style={props}>\n                <Todo\n                  key={t.id}\n                  id={t.id}\n                  task={t.task}\n                  isDone={t.isDone}\n                  toggleIsDone={toggleIsDone}\n                  edit={editTodo}\n                  close={closeTodo}\n                />\n              </animated.div>\n            );\n          })}\n      </section>\n      <NewTodoForm submit={addTodo} />\n    </main>\n  );\n};\n\nexport default TodoList;\n","import TodoList from './TodoList/TodoList';\nimport NewTodoForm from './NewTodoForm/NewTodoForm';\nimport './App.css';\n\nfunction App() {\n  return (\n    <section className=\"App\">\n      <TodoList />\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}